
/////////////////////// My APPROACH ///////////////////////

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int count=0;
        for(int i:arr){
            count+=1;
        }
        int start=0;
        int end=count-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1]){
                return mid;
            }
            else if(arr[mid]<arr[mid+1]){
                start=mid+1;
            }
            else if(arr[mid]<arr[mid-1]){
                end=mid-1;
            }
            else if(arr[mid]==arr[mid+1]){
                start=mid+1;
            }
        }
        return -1;
    }
}




///////////////////////////////// another way to solve which is: /////////////////////////////////
// class Solution {
//     public int peakIndexInMountainArray(int[] arr) {
//         //linear search - O(n)
//         for(int i=0; i<arr.length; i++){
//             if(arr[i] > arr[i+1]){
//                return i; 
//             }
//         }
//         return -1;
//     }
// }




/////////////////////////////////// third way to solve the question /////////////////////////////////

// class Solution {
//     public int peakIndexInMountainArray(int[] arr) {
//         int res = -1;
//         if (arr == null || arr.length == 0) {
//             return res;
//         }

//         int left = 0;
//         int right = arr.length - 1;

//         while (left <= right) {
//             int mid = left + (right - left) / 2;
//             if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {
//                 left = mid;
//             } else if (arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1]) {
//                 right = mid;
//             } else {
//                 return mid;
//             }
//         }

//         return res;
//     }
// }
