class Solution {

    static int[] search(int[] arr,int target,int n){
        int start=0;
        int end=arr.length-1;
        if(arr[n]+arr[n+1]==target){
            return new int[]{n+1,n+1+1};
        }
        while(start<=end){
            int mid=start+(end-start)/2;
            if(arr[mid]+arr[n]==target && mid!=n){
                if(mid>n){
                    return new int[]{n+1,mid+1};
                }
                else{
                    return new int[]{mid+1,n+1};
                }
                
            }
            else if(arr[mid]+arr[n]>target){
                end=mid-1;
            }
            else if(arr[mid]+arr[n]<target){
                start=mid+1;
            }
        }
        return new int[]{-1,-1};
    }

    public int[] twoSum(int[] numbers, int target) {
        for(int i=0;i<numbers.length;i++){
            int[] r=search(numbers,target,i);
            if(r[0]!=-1){
                return r;
            }
        }
        return new int[]{-1,-1};
    }
}
